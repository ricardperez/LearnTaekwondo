//
//  TKDSubject.h
//  LearnTaekwondo
//
//  Created by Ricard Pérez del Campo on 01/06/13.
//  Copyright (c) 2013 Ricard Pérez del Campo. All rights reserved.
//

#import <Foundation/Foundation.h>


@class TKDNode;

/**
 * A subject is a model that has a name, a related image and a set of childs
 * (nodes). This class represents so.
 * The image will be cached and only instanced when accessed. A purge message
 * exists to free that memory. In any memory warning alert, this message should
 * be triggered.
 * Childs should be queried by the nodesForDan: message, which will load them
 * lazily. TKDNodeFactory will be used to get them the first time.
 *
 * The way to instantiate a TKDSubject is by giving a keyname. This keyname is
 * going to be used to get the image name and the localized name. The same
 * keyname with an extension .png is going to be used as the image name. The
 * keyname, by replacing all '_' characters by ' ' and making the first letter
 * of each word uppercaase, will be used as the key to search for in the
 * localizable strings file.
 */
@interface TKDSubject : NSObject

/**
 * The keyname given at constructor.
 * Should be readonly (externally).
 */
@property (nonatomic, copy) NSString *keyName;

/**
 * The localized name constructed from the given key name at constructor. This
 * is the keyname by appending the png extension.
 * Should be readonly (externally).
 */
@property (nonatomic, copy) NSString *localizedName;

/**
 * The name for the image to be loaded. A new string is generated by taking the
 * keyname and replacing all '_' characters by spaces and making the first
 * letter of each word uppercase. This string is then used to query the
 * localizable file.
 * Should be readonly (externally).
 */
@property (nonatomic, retain) NSString *imageName;

/**
 * Will be loaded lazily using the imageName property.
 * If purge is called, it will be released and set to nil.
 */
@property (nonatomic, retain) UIImage *cachedImage;

/**
 * The childs. Will be nil by default.
 * This is a dictionary that organizes childs by its respective DAN.
 * It should not be queried externally but asking for the nodesForDan: message,
 * which will get them from this property if they have already been cached or
 * load them and store them here for next query.
 * Should be readonly (externally).
 */
@property (nonatomic, retain) NSMutableDictionary *nodes;

/**
 * Constructor with keyname param. The keyname is used to fill most other
 * properties.
 * To get the child nodes, call nodesForDan: instead of accessing the nodes
 * property directly.
 */
- (id)initWithKeyName:(NSString *)keyName;

/**
 * Dan may go from 1 to 9
 * It will return the cached result if existing (from the nodes property).
 * Otherwise, it will use TKDNodeFactory to instantiate them and then will store
 * them to nodes property.
 */
- (NSArray *)nodesForDan:(NSInteger)dan;

/**
 * This message will release the cachedImage and set it to nil.
 * This should be called at any memory warning alert.
 */
- (void)purge;

@end
